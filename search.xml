<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客乱改记录</title>
      <link href="/hexo/"/>
      <url>/hexo/</url>
      
        <content type="html"><![CDATA[<p>更换主题后，记录一下自己动过什么，以及想动什么</p><p>计划</p><p>1.数学公式适配</p><p>2………………</p><p>动过相关</p><p>1._config,yml中链接带有日期修改，便于图片能够正确找到</p><p>2.额外在_config,yml补充了tag_generator，使得标签页能够正常显示</p><p>3.数学公式适配，存在问题。新建mathjax.pug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">script(type=&quot;text/x-mathjax-config&quot;).</span><br><span class="line">    MathJax.Hub.Config(&#123;</span><br><span class="line">    extensions: [&quot;tex2jax.js&quot;],</span><br><span class="line">    jax: [&quot;input/TeX&quot;, &quot;output/HTML-CSS&quot;],</span><br><span class="line">    tex2jax: &#123;</span><br><span class="line">        inlineMath: [ [&#x27;$&#x27;,&#x27;$&#x27;], [&quot;\\(&quot;,&quot;\\)&quot;] ],</span><br><span class="line">        displayMath: [ [&#x27;$$&#x27;,&#x27;$$&#x27;], [&quot;\\[&quot;,&quot;\\]&quot;] ],</span><br><span class="line">        processEscapes: true</span><br><span class="line">    &#125;,</span><br><span class="line">        &quot;HTML-CSS&quot;: &#123; fonts: [&quot;TeX&quot;] &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">script(type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js&quot;)</span><br></pre></td></tr></table></figure><p>然后在适合的地方，和文章相关的地方include一下就好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.mathjax &amp;&amp; theme.mathjax.enable</span><br><span class="line">    include mathjax.pug</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MPC模型预测控制</title>
      <link href="/mpc/"/>
      <url>/mpc/</url>
      
        <content type="html"><![CDATA[<p>作为准备毕业设计中记录的一个小小的笔记，基本上是DR_CAN视频内容的文字化，加上一点偷的弹幕的理解，学习的视频链接<a href="https://www.bilibili.com/video/BV1cL411n7KV/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2c9b0ff37b57e06f19aca3a7a022d4b">https://www.bilibili.com/video/BV1cL411n7KV/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2c9b0ff37b57e06f19aca3a7a022d4b</a> </p><h3 id="最优控制和基本概念"><a href="#最优控制和基本概念" class="headerlink" title="最优控制和基本概念"></a>最优控制和基本概念</h3><p>最优控制的研究动机：在约束条件下达到最优的系统表现。约束条件例如一辆车在转向时轮胎可以转向的最大半径。最优是一个综合的结果，并不是越快越好，例如下面两条轨迹，轨迹1相较轨迹2比较舒适。遇到紧急避障，避免撞上障碍物，轨迹2更好。</p><p><img src="./../images/mpc/1735038768859.png" alt="1735038768859" style="zoom:80%;"></p><p>类比为单入单出系统（SISO），引入误差函数对$e^2$积分，越小跟踪越好，对输入$u^2$进行积分，越小输入越小，说明能耗是最低的，能够用很小的能耗达到系统的表现，加入平方是为了排除出现正负误差抵消对结果的影响。</p><p><img src="./../images/mpc/image-20241224192005535.png" alt="image-20241224192005535" style="zoom:80%;"></p><p>代价函数，q，r进行调节，使得J最小。</p><p><img src="./../images/mpc/1735040035818.png" alt="1735040035818" style="zoom:80%;"></p><p>q&gt;&gt;r，看重误差，r&gt;&gt;q，看重输入。</p><p>对于多入多出系统，以这样一个状态空间为例，设出代价函数（二次型指标）</p><p><img src="./../images/mpc/1735040359352.png" alt="1735040359352" style="zoom:67%;"></p><p>Q,R为调节矩阵，类比于单入单出矩阵q，r都是1的一阶矩阵，这边可以完全可以将Q,R设成对角阵，Q，R对角线上的元素的大小，重视哪个输入的误差or输入。</p><p>例如设$Q= \left[<br>\matrix{<br>  1 &amp; 0\<br>  0 &amp; 0\<br>}<br>\right]$      $R= \left[<br>\matrix{<br>  0 &amp; 0\<br>  0 &amp; 0\<br>}<br>\right]$      表示只关心x1的误差</p><p><img src="./../images/mpc/1735040922947.png" alt="1735040922947" style="zoom: 80%;"></p><p>MPC的基本概念：通过模型来预测在某一未来时间段内的表现来进行优化控制。多用于数位控制，常用离散，状态空间表达：$x(k+1)=Ax(k)+Bu(k)$</p><p>分为三步：</p><p>在k时刻：</p><p>step1.测量/估计当前值。</p><p>step2.基于u(k),u(k+1)…..u(k+n)来进行最优化，离散型，积分号变成加和，找到En的最小值</p><p><img src="./../images/mpc/1735042882430.png" alt="1735042882430" style="zoom:80%;"></p><p>step3.只取u(k)，滚动优化</p><p><img src="./../images/mpc/1735042922850.png" alt="1735042922850" style="zoom:80%;"></p><p>可能有误的理解下，类比于下棋，下一步棋前要预测很多步，但对面棋下完后又要重新考虑。感觉和贪心类似。</p><h3 id="最优化数学建模推导"><a href="#最优化数学建模推导" class="headerlink" title="最优化数学建模推导"></a>最优化数学建模推导</h3><p>二次规划</p><p>一般形式:       $min Z^TQZ+C^TZ$</p><p>一般设Q为对角矩阵,$Z=[z1,z2,z3……]^T$,$f(z)=Z^TQZ$​为二次型的形式，找到最小</p><p><img src="./../images/mpc/1735055221181.png" alt="1735055221181" style="zoom: 67%;"></p><p>对于一般的离散状态空间     $x(k+1)=Ax(k)+Bu(k)$</p><p>在k时刻，出现u(k|k),u(k+1|k)………u(k+i|k),后面的k是就是指的是当前时刻，前面的k,k+1……k+i都是在k时刻预测出来的东西，可以类比于条件概率的形式，虽然扯不上半毛边。然后预测空间N为预测这样的有多少个u，根据实际情况来决定。由于存在u(k|k),u(k+1|k)………u(k+N|k)，就不妨设以下</p><p>$X=[x(k|k),x(k+1|k)………x(k+N|k)]^T$​</p><p>$U=[u(k|k),u(k+1|k)………u(k+N-1|k)]^T$​</p><p>(对于这里u(k+N-1|k)还是u(k+N|k)，我觉得是u(k+N-1|k)，得出x(k+N|k)只到u(k+N-1|k))</p><p><img src="./../images/mpc/1735055546822.png" alt="1735055546822"></p><p>转置相乘对应的就是平方和，$e^2$，$u^2$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年末的一点回忆</title>
      <link href="/2024final/"/>
      <url>/2024final/</url>
      
        <content type="html"><![CDATA[<p>​    25考研初试已经过去了，感觉这大半年估计沉没了，但这半年是摸鱼过的，感觉没算太亏（），这大半年来感觉并没有恢复专注学习的能力，或许本来就没有了吧，24年的试题除了数学，给了我太多的错觉了，没对答案，估计大半是寄了，把未知留给未来吧，被出题老头彻底弄服气，确实比不过其他人。</p><p>​    好像这一年，或许也不是那么不堪？</p><p>​    前半年在折腾树莓派，对linux有点了解，写了点自认为稍微有点意义的东西，搞了搞简单地识别宝物逻辑，把总线舵机稍微搞搞，成功地用成了普通的pwm波舵机，原本目的是将舵机实际位置直接传入单片机，拒绝反复烧录调参，可惜还是摆烂不想搞。改了改比赛的pcb，总还是给大伙留下来了一点什么东西，侥幸搞了个一等奖，感觉最大的意义是能把自己学到的一点浅薄东西能够写下来，给未来的自己省下些时间排除一些奇怪的问题。这半年还补以前摆烂不选课欠的学分，比起正常人多上了一节半课，回寝室更摆了，天天打土豆，成功打了个全成就，给后面埋伏笔了。</p><p><img src="./../images/2024final/图片2.png" alt="图片2" style="zoom: 33%;"></p><p>​    也去了趟第一次也应该是最后一次方舟的展，人很挤，但也挺快乐，真正在工大找到组织了，快乐地爆了一堆米，可惜仍有不愉快的地方是丢了身份证，-30。我真是傻到五一去外滩人挤人。今年CP没去，如果明年顺利地上岸，弥补下这次的遗憾吧。</p><p><img src="./../images/2024final/p3.png" alt="图片3" style="zoom: 25%;"></p><p>​    算是从期末考试考完，打拉塔恩打自闭了，才有意识到了自己该好好准备考研了，但仍是不紧不慢，慢慢悠悠地复习，看了那些网上的经验贴，尤其80天速通，一直觉得自己时间很宽裕，而且起初也没有目标，没有考虑自己的实际情况，高数是真的一点不会，自控是被老师捞，七月份在校磨磨唧唧把高数下和概率论看完了，实际到后面发现自己一点都不会，级数求和二元分布都不会，线代也照样不会做。到七月末回了家，效率一天比一天低，内耗一天比一天高，作息自动的朝着白天睡觉，晚上睡不着焦虑。</p><p>​    八月下回校情况稍微好点，后面些天学习时长能稍微保持一点了，但各种身体问题出现，外界环境这些问题，还有些进度飞快的大佬，焦虑，彻底进入了不好好关注基础，模拟卷一张比一张烂，但也不肯停下来，一直以状态问题来麻痹自己，这就留下了巨大的坑。下面是摸了半年鱼的学习时长，大半都是躲在舒适圈自我麻痹的垃圾时间，但战斗爽。政治也是能背下来了，可惜今年肖四拉了大胯。</p><p><img src="./../images/2024final/p1.png" alt="图片1" style="zoom: 33%;"></p><p>​    也感谢学校能够提供养贤府二楼这个自习场所，给我这个懒狗有了一个不去图书馆的理由，面向吃饭型学习，虽然环境确实不怎么样，没有空调，没有插座，三楼唱歌，电路实验，但至少是个地方给我让我学进去一点，还能不用搬书。也感谢坐在周围的朋友的鼓励和一同奋斗。也感谢听泉，没脸鉴车，老厮等给我这些天的快乐。</p><p>​    24这一整年比起前三年的浑浑噩噩待在寝室里还是好多了，或许还是太迟了，考研需要补的坑太大了，准备考研貌似占据原本无所事事的时间，但烂完的事实导致这个稳态变得更严重了，所以还是只能从现在开始补偿过去了，混点技术，但愿春招能顺顺利利地找个工作得了，也该走出去了，当然如果能进复试是再好不过啦，能够成功捕到大鸟是多么美妙的一件事啊。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>飞特舵机使用</title>
      <link href="/FTServo/"/>
      <url>/FTServo/</url>
      
        <content type="html"><![CDATA[<p>偷偷地之前比赛写的东西搬过来doge</p><p>舵机上位机下载：<a href="https://gitee.com/ftservo/fddebug">https://gitee.com/ftservo/fddebug</a><br>首先电脑连接舵机控制板，舵机控制板连接舵机，舵机控制板连接电源（6~9V），小稳压分一根线即可</p><p><img src="./../images/FTServo/image.png" alt="image" style="zoom: 33%;"></p><p>每次先连一个舵机，波特率改为(波特率：SCS/STS 系列舵机波特率是 1000000，SMS 系列是 115200)打开端口，然后点击搜索，左下角出现舵机，一定要给舵机控制板上电源，否则找不到舵机。1000000波特率太离谱了，串口收到的只有0。</p><p><img src="./../images/FTServo/image (1).png" alt="image (1)" style="zoom: 67%;"></p><p>例如像这样，点击一个</p><p><img src="./../images/FTServo/image (2).png" alt="image (2)" style="zoom:50%;"></p><p>点击ID，修改，保存，保证自己车上的舵机每个ID不同即可。点击波特率，改为4(对应波特率为115200)，保存。<br>最后，每个舵机进行如上相同的配置方法即可。<br>导入stm32工程中</p><p><a href="./../images/FTServo/feetech.rar">代码下载</a></p><p>控制舵机的函数为</p><p><img src="./../images/FTServo/image (3).png" alt="image (3)"></p><p>第一个参数为舵机ID，第二个参数为舵机位置，后面两个为速度和加速度，基本不需要改。<br>若只实现最简单的舵机控制操作，连线实际只需两根线，主板的GND连接舵机控制板的GND,主板的USART1的TX连接舵机控制板的TX，主板RX接控制板RX即可（不要怀疑，就是TX连TX，RX接RX）。</p><p>当然，现在仅仅当成普通pwm舵机用，之后有机会再完善下吧，能直接读舵机位置</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>YZ-AIM电机驱动记录</title>
      <link href="/yzaim/"/>
      <url>/yzaim/</url>
      
        <content type="html"><![CDATA[<p>​    仅仅是驱动电机，实现加减速，具体实现方式数据传输见于电机说明书，对于其数据传输存在疑惑，可以串口助手先进行尝试，可以利用上位机，然后配合串口监控精灵，观察他到底是传的是什么。</p><p>​    这个作为代码存档，这是一大坨屎山，但网上没有相关代码可以抄，对于串口传输规范并没怎么研究，没有像其他地方的范例一样规范，CV进入代码绝对会有报错，补充相关变量即可，实现驱动功能的芯片为stm32f103zet6</p><h4 id="STM32驱动实现"><a href="#STM32驱动实现" class="headerlink" title="STM32驱动实现"></a>STM32驱动实现</h4><p>代码的实现均在速度模式下实现</p><p>串口初始化:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UART5_init</span><span class="params">(u32 bound)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//GPIO端口设置</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD, ENABLE);<span class="comment">//使能GPIOC/GPIOD时钟</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);<span class="comment">//使能UART5时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12; <span class="comment">//PC12</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//传输速度50MHZ</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;<span class="comment">//复用推挽输出</span></span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;<span class="comment">//PD2</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">GPIO_Init(GPIOD, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"><span class="comment">//UART 初始化设置</span></span><br><span class="line">USART_DeInit(UART5); <span class="comment">//复位串口5</span></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//串口波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">    USART_Init(UART5, &amp;USART_InitStructure); <span class="comment">//初始化串口5</span></span><br><span class="line"><span class="comment">//Uart5 NVIC 配置</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;<span class="comment">//串口5中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;<span class="comment">//子优先级3</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line"> USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);<span class="comment">//开启串口接受中断</span></span><br><span class="line">USART_Cmd(UART5, ENABLE);                    <span class="comment">//使能串口5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电机运动控制，其传输指令结合为:地址+写功能（一个读取一个写入）+功能码+转速（若功能码为速度）+CRC校验码，更多功能详见说明书</p><p>CRC16校验,采用的是查表法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CRC 高位字节值表 */</span> <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> auchCRCHi[] = &#123;</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x81</span>, <span class="number">0x40</span></span><br><span class="line">&#125; ;</span><br><span class="line"><span class="comment">/* CRC 低位字节值表*/</span> <span class="type">static</span> <span class="type">char</span> auchCRCLo[] = &#123;</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0xC1</span>, <span class="number">0x01</span>, <span class="number">0xC3</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0xC2</span>, <span class="number">0xC6</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x05</span>, <span class="number">0xC5</span>, <span class="number">0xC4</span>, <span class="number">0x04</span>, <span class="number">0xCC</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0xCD</span>, <span class="number">0x0F</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0xCA</span>, <span class="number">0xCB</span>, <span class="number">0x0B</span>, <span class="number">0xC9</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0xC8</span>, <span class="number">0xD8</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0xD9</span>, <span class="number">0x1B</span>, <span class="number">0xDB</span>, <span class="number">0xDA</span>, <span class="number">0x1A</span>, <span class="number">0x1E</span>, <span class="number">0xDE</span>, <span class="number">0xDF</span>, <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0x1D</span>, <span class="number">0x1C</span>, <span class="number">0xDC</span>, <span class="number">0x14</span>, <span class="number">0xD4</span>, <span class="number">0xD5</span>, <span class="number">0x15</span>, <span class="number">0xD7</span>, <span class="number">0x17</span>, <span class="number">0x16</span>, <span class="number">0xD6</span>, <span class="number">0xD2</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0xD3</span>, <span class="number">0x11</span>, <span class="number">0xD1</span>, <span class="number">0xD0</span>, <span class="number">0x10</span>, <span class="number">0xF0</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0xF1</span>, <span class="number">0x33</span>, <span class="number">0xF3</span>, <span class="number">0xF2</span>, <span class="number">0x32</span>, <span class="number">0x36</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0x37</span>, <span class="number">0xF5</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0xF4</span>, <span class="number">0x3C</span>, <span class="number">0xFC</span>, <span class="number">0xFD</span>, <span class="number">0x3D</span>, <span class="number">0xFF</span>, <span class="number">0x3F</span>, <span class="number">0x3E</span>, <span class="number">0xFE</span>, <span class="number">0xFA</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0xFB</span>, <span class="number">0x39</span>, <span class="number">0xF9</span>, <span class="number">0xF8</span>, <span class="number">0x38</span>, <span class="number">0x28</span>, <span class="number">0xE8</span>, <span class="number">0xE9</span>, <span class="number">0x29</span>, <span class="number">0xEB</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0xEA</span>, <span class="number">0xEE</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0xEF</span>, <span class="number">0x2D</span>, <span class="number">0xED</span>, <span class="number">0xEC</span>, <span class="number">0x2C</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0xE5</span>, <span class="number">0x27</span>, <span class="number">0xE7</span>, <span class="number">0xE6</span>, <span class="number">0x26</span>, <span class="number">0x22</span>, <span class="number">0xE2</span>, <span class="number">0xE3</span>, <span class="number">0x23</span>, <span class="number">0xE1</span>, <span class="number">0x21</span>, <span class="number">0x20</span>, <span class="number">0xE0</span>, <span class="number">0xA0</span>, <span class="number">0x60</span>, <span class="number">0x61</span>, <span class="number">0xA1</span>, <span class="number">0x63</span>, <span class="number">0xA3</span>, <span class="number">0xA2</span>, <span class="number">0x62</span>, <span class="number">0x66</span>, <span class="number">0xA6</span>, <span class="number">0xA7</span>, <span class="number">0x67</span>, <span class="number">0xA5</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0xA4</span>, <span class="number">0x6C</span>, <span class="number">0xAC</span>, <span class="number">0xAD</span>, <span class="number">0x6D</span>, <span class="number">0xAF</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0xAE</span>, <span class="number">0xAA</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0xAB</span>, <span class="number">0x69</span>, <span class="number">0xA9</span>, <span class="number">0xA8</span>, <span class="number">0x68</span>, <span class="number">0x78</span>, <span class="number">0xB8</span>, <span class="number">0xB9</span>, <span class="number">0x79</span>, <span class="number">0xBB</span>, <span class="number">0x7B</span>, <span class="number">0x7A</span>, <span class="number">0xBA</span>, <span class="number">0xBE</span>, <span class="number">0x7E</span>, <span class="number">0x7F</span>, <span class="number">0xBF</span>, <span class="number">0x7D</span>, <span class="number">0xBD</span>, <span class="number">0xBC</span>, <span class="number">0x7C</span>, <span class="number">0xB4</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0xB5</span>, <span class="number">0x77</span>, <span class="number">0xB7</span>, <span class="number">0xB6</span>, <span class="number">0x76</span>, <span class="number">0x72</span>, <span class="number">0xB2</span>, <span class="number">0xB3</span>, <span class="number">0x73</span>, <span class="number">0xB1</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0x50</span>, <span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x51</span>, <span class="number">0x93</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x92</span>, <span class="number">0x96</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0x95</span>, <span class="number">0x94</span>, <span class="number">0x54</span>, <span class="number">0x9C</span>, <span class="number">0x5C</span>, <span class="number">0x5D</span>, <span class="number">0x9D</span>, <span class="number">0x5F</span>, <span class="number">0x9F</span>, <span class="number">0x9E</span>, <span class="number">0x5E</span>, <span class="number">0x5A</span>, <span class="number">0x9A</span>, <span class="number">0x9B</span>, <span class="number">0x5B</span>, <span class="number">0x99</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x98</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0x4B</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x4A</span>, <span class="number">0x4E</span>, <span class="number">0x8E</span>, <span class="number">0x8F</span>, <span class="number">0x4F</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x8C</span>, <span class="number">0x44</span>, <span class="number">0x84</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0x87</span>, <span class="number">0x47</span>, <span class="number">0x46</span>, <span class="number">0x86</span>, <span class="number">0x82</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x83</span>, <span class="number">0x41</span>, <span class="number">0x81</span>, <span class="number">0x80</span>, <span class="number">0x40</span> &#125;;</span><br><span class="line"><span class="comment">//CRC查表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> <span class="title function_">CRC16</span><span class="params">(u32 *puchMsg, u8 usDataLen)</span>  <span class="comment">/* 要进行 CRC 校验的消息 */</span>  <span class="comment">/* 消息中字节数 */</span></span><br><span class="line">&#123;u16 uchCRCHi = <span class="number">0xFF</span> ; <span class="comment">/* 高 CRC 字节初始化 */</span> </span><br><span class="line">u16 uchCRCLo = <span class="number">0xFF</span> ; <span class="comment">/* 低 CRC 字节初始化 */</span></span><br><span class="line"><span class="type">unsigned</span> uIndex ; <span class="comment">/* CRC 循环中的索引 */</span> </span><br><span class="line"><span class="keyword">while</span> (usDataLen--) <span class="comment">/* 传输消息缓冲区 */</span></span><br><span class="line">&#123;uIndex = uchCRCHi ^ *puchMsg++ ; <span class="comment">/* 计算 CRC */</span> </span><br><span class="line">uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; </span><br><span class="line">uchCRCLo = auchCRCLo[uIndex] ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (uchCRCHi &lt;&lt; <span class="number">8</span> | uchCRCLo) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    前进，后退和停止基本上都是这么处理的：若是前进，将其速度分成两个两位数字，就像0XFFFF分成，0XFF，0XFF，因为数值位有4位，便于CRC函数校验数组，然后依次将数存入数组，然后扔给CRC校验函数即可，获得CRC的值，然后依次发给电机即可，反转就传入负数，取反加一即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">(u16 Left,u16 Right)</span><span class="comment">// </span></span><br><span class="line">&#123;</span><br><span class="line">u8 temp1_L;u8 temp2_L;</span><br><span class="line">u8 temp1_R;u8 temp2_R;</span><br><span class="line">u16 crc_L;</span><br><span class="line">u16 crc_R;<span class="comment">//低位前置 CRC</span></span><br><span class="line">Left=range(Left,<span class="number">0</span>,<span class="number">800</span>);</span><br><span class="line">Right=range(Right,<span class="number">0</span>,<span class="number">800</span>);</span><br><span class="line"><span class="comment">//实现后退取消注释以下代码即可</span></span><br><span class="line"><span class="comment">//Left=~Left+0x01;</span></span><br><span class="line"><span class="comment">//Right=~Right+0x01;</span></span><br><span class="line">temp1_L = (Left&amp;<span class="number">0XFF00</span>)&gt;&gt;<span class="number">8</span>;</span><br><span class="line">temp2_L = (Left&amp;<span class="number">0X00FF</span>);</span><br><span class="line">temp1_R = (Right&amp;<span class="number">0XFF00</span>)&gt;&gt;<span class="number">8</span>;</span><br><span class="line">temp2_R = (Right&amp;<span class="number">0X00FF</span>);</span><br><span class="line">u32 tempL[<span class="number">6</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, temp1_L, temp2_L&#125;;</span><br><span class="line">u32 tempR[<span class="number">6</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, temp1_R, temp2_R&#125;;</span><br><span class="line"></span><br><span class="line">crc_R=CRC16(tempR,<span class="number">6</span>);</span><br><span class="line">crc_L=CRC16(tempL,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line">USART_SendData(UART5,<span class="number">0x01</span>);</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line"><span class="comment">//写功能</span></span><br><span class="line">USART_SendData(UART5,<span class="number">0x06</span>);</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line"><span class="comment">//功能</span></span><br><span class="line">USART_SendData(UART5,<span class="number">0x00</span>);</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line">USART_SendData(UART5,<span class="number">0x02</span>);</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line"><span class="comment">//转速</span></span><br><span class="line">USART_SendData(UART5,(Left&amp;<span class="number">0XFF00</span>)&gt;&gt;<span class="number">8</span>);</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line">USART_SendData(UART5,(Left&amp;<span class="number">0X00FF</span>));</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line"><span class="comment">//CRC校验码</span></span><br><span class="line">USART_SendData(UART5,(crc_L&amp;<span class="number">0XFF00</span>)&gt;&gt;<span class="number">8</span>);</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line">USART_SendData(UART5,(crc_L&amp;<span class="number">0X00FF</span>));</span><br><span class="line"><span class="keyword">while</span> (USART_GetFlagStatus(UART5, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    有了底层实现，加减速与普通代码实现就类似，建议传输的间隔小一点，与普通直流电机相比，内部会闭环控制，当你给定一个速度时，电机会立马到达这个速度，导致电机加减速时一震一震的，还有个方法，修改其内部加速度。</p><h4 id="YZ-AIM上位机"><a href="#YZ-AIM上位机" class="headerlink" title="YZ-AIM上位机"></a>YZ-AIM上位机</h4><p><img src="./../images/yzaim/p1.png" alt="p1"></p><p>​    对于打开串口，软件不能自动识别已经连接了哪个串口，打开设备管理器或者一个个试下去，然后不能开太久，软件会自己崩掉。</p><p>电机连接RS485转USB连接电脑并且上电，打开串口，左下出现数值，先modbus使能电机，改为速度模式，将特殊参数改为3（速度模式对应的值）。根据实际情况，修改下电机内部的pid的值。完成一系列操作后，最后将参数保存，将其置2。</p><p><a href="./../images/yzaim/YZ-AIM.pdf">手册</a></p><p><a href="./../images/yzaim/yzaim.rar">上位机</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>f28335以及ccs环境</title>
      <link href="/dsp/"/>
      <url>/dsp/</url>
      
        <content type="html"><![CDATA[<p>对于dsp的学习仅仅停留在表面，距离结课已有了一个月多，虽然遗忘很多，还是留点东西吧</p><p>很多东西是已经是存在的，和stm32的库函数类似，课程基本是靠CCS的观察变量变化，来得出结果，除了电机，其他没有外设</p><h3 id="内存分配位置"><a href="#内存分配位置" class="headerlink" title="内存分配位置"></a>内存分配位置</h3><p>在不指定变量的存放位置时，const变量放入econst段，非const放入ebss段里，在函数里定义的变量不会被放入任何段，直接在ram中</p><p>对于指定变量位置时，建议代码放入page0位置，数据放入page1位置</p><p>指定变量，例如，在cmd处增加<code>mydata           : &gt; RAML7,     PAGE = 1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> DATA_SECTION(zjut,<span class="string">&quot;mydata&quot;</span>)</span></span><br><span class="line"><span class="type">float</span> zjut[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>指定函数，例如，在cmd处增加<code>mycode           : &gt; RAML2,     PAGE = 0</code>，在main函数中调用下，否则可能会被编译器优化掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> CODE_SECTION(qqqq,<span class="string">&quot;mycode&quot;</span>)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">qqqq</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>先编译代码，然后点击view-&gt;Memory Allocation观察内存分配</p><p><img src="./../images/dsp/p1-1720025287459-1.png" alt="p1"></p><h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>一般都是以这样开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InitSysCtrl();<span class="comment">//系统时钟初始化，默认已开启F28335所有外设时钟</span></span><br><span class="line">IER = <span class="number">0x0000</span>;</span><br><span class="line">IFR = <span class="number">0x0000</span>;</span><br><span class="line">InitPieVectTable();</span><br></pre></td></tr></table></figure><p>初始化外设，清楚禁用所有中断，初始化中断向量表</p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><h3 id="F28335看门狗"><a href="#F28335看门狗" class="headerlink" title="F28335看门狗"></a>F28335看门狗</h3><p>​    f28335操作寄存器的特点是要先关闭保护，才能继续操作</p><p>​    喂狗函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ServiceDog</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    EALLOW;</span><br><span class="line">    SysCtrlRegs.WDKEY = <span class="number">0x0055</span>;</span><br><span class="line">    SysCtrlRegs.WDKEY = <span class="number">0x00AA</span>;</span><br><span class="line">    EDIS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    看门狗简单来说就是防止程序跑飞，当其计数器到达一定的值时，产生中断信号，使得产生中断或者使得处理器复位,在已有看门狗代码下进行如下循环，用以观察看门狗的现象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">   LoopCount++;</span><br><span class="line">   <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="comment">//通过手动更改a的值来实现是否喂看门狗</span></span><br><span class="line">   &#123;</span><br><span class="line">   ServiceDog();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不喂狗：</p><p><img src="./../images/dsp/p2.png" alt="p2"></p><p>喂狗：</p><p><img src="./../images/dsp/p3.png" alt="p3"></p><h3 id="定时器中断"><a href="#定时器中断" class="headerlink" title="定时器中断"></a>定时器中断</h3><p>与stm32不同的是，stm32有专门的中断函数，CCS可以自定义函数名，然后与对于中断绑定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EALLOW; </span><br><span class="line">PieVectTable.TINT2 = &amp;ISRTimer2;</span><br><span class="line">PieVectTable.XINT13 = &amp;ISRTimer1;</span><br><span class="line">PieVectTable.TINT0 = &amp;ISRTimer0;</span><br><span class="line">EDIS;</span><br></pre></td></tr></table></figure><p>中断函数,PieCtrlRegs.PIEACK.bit.ACK1=1语句与32类似，中断标志位恢复</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interrupt <span class="type">void</span> <span class="title function_">ISRTimer2</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        EALLOW;</span><br><span class="line">        c++;</span><br><span class="line">        PieCtrlRegs.PIEACK.bit.ACK1=<span class="number">1</span>;</span><br><span class="line">        EDIS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时钟启动</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EALLOW;</span><br><span class="line">SysCtrlRegs.PCLKCR3.bit.CPUTIMER0ENCLK = <span class="number">1</span>; <span class="comment">// CPU Timer 0</span></span><br><span class="line">SysCtrlRegs.PCLKCR3.bit.CPUTIMER1ENCLK = <span class="number">1</span>; <span class="comment">// CPU Timer 0</span></span><br><span class="line">SysCtrlRegs.PCLKCR3.bit.CPUTIMER2ENCLK = <span class="number">1</span>; <span class="comment">// CPU Timer 0</span></span><br><span class="line">EDIS;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应定时器开启</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">InitCpuTimers();</span><br><span class="line">ConfigCpuTimer(&amp;CpuTimer2, <span class="number">150</span>, <span class="number">3000000</span>);<span class="comment">//三秒中断，150分频</span></span><br><span class="line">   ConfigCpuTimer(&amp;CpuTimer0, <span class="number">150</span>, <span class="number">2000000</span>);</span><br><span class="line">   ConfigCpuTimer(&amp;CpuTimer1, <span class="number">150</span>, <span class="number">1000000</span>);</span><br><span class="line">StartCpuTimer2();</span><br><span class="line">   StartCpuTimer1();</span><br><span class="line">   StartCpuTimer0();</span><br><span class="line">   <span class="comment">/*开中断*/</span></span><br><span class="line">IER |= M_INT14;</span><br><span class="line">   IER |= M_INT13;</span><br><span class="line">   IER |= M_INT1;</span><br><span class="line">   PieCtrlRegs.PIEIER1.bit.INTx7 = <span class="number">1</span>;</span><br><span class="line">EINT;</span><br><span class="line">ERTM;</span><br></pre></td></tr></table></figure><p>InitCpuTimers,ConfigCpuTimer,StartCpuTimer0之类的函数都是已有的，调用填入相关参数即可</p><h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><p>与定时器中断相类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EALLOW; </span><br><span class="line">  PieVectTable.XINT1 = &amp;ISRExint1;<span class="comment">//对应中断函数</span></span><br><span class="line">  EDIS; </span><br><span class="line">  PieCtrlRegs.PIECTRL.bit.ENPIE = <span class="number">1</span>;       </span><br><span class="line">PieCtrlRegs.PIEIER1.bit.INTx4= <span class="number">1</span>; </span><br><span class="line">  IER |= M_INT1;                            </span><br><span class="line">   EINT;   </span><br><span class="line">   ERTM;   </span><br></pre></td></tr></table></figure><p>外部中断需要设置XINTn外部中断通道挂接对应在某引脚外部中断1（XINT1）到外部中断2（XINT2）可以挂接GPIO0到GPIO31，外部中断3（XINT3）到外部中断7（XINT7）可以挂接GPIO32到GPIO63。</p><p>引脚配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GpioCtrlRegs.GPAMUX2.bit.GPIO18 = <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPADIR.bit.GPIO18 = <span class="number">0</span>;  <span class="comment">//1为输出功能</span></span><br><span class="line">GpioCtrlRegs.GPAQSEL2.bit.GPIO18= <span class="number">2</span>;</span><br><span class="line">GpioCtrlRegs.GPAPUD.bit.GPIO18=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GpioIntRegs.GPIOXINT1SEL.bit.GPIOSEL = <span class="number">18</span>;<span class="comment">//选择GPIO18为外部输入XINT3输入引脚</span></span><br><span class="line">XIntruptRegs.XINT1CR.bit.POLARITY= <span class="number">0</span>;<span class="comment">//XIntruptRegs.XINT1CR.bit.POLARITY，置0时为下降沿，置1时为上升沿</span></span><br><span class="line">XIntruptRegs.XINT1CR.bit.ENABLE = <span class="number">1</span>; <span class="comment">//使能XINT1中断</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ePWM"><a href="#ePWM" class="headerlink" title="ePWM"></a>ePWM</h3><p>一个定时器可以输出两种PWM波，互补，或者相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EPwm3Regs.AQCTLA.bit.CAU = AQ_CLEAR;  </span><br><span class="line">EPwm3Regs.AQCTLA.bit.ZRO = AQ_SET;</span><br><span class="line"><span class="comment">//A通道，上升计数到达，置1。计数为0，置1</span></span><br><span class="line">EPwm3Regs.AQCTLB.bit.CBU = AQ_SET;          </span><br><span class="line">EPwm3Regs.AQCTLB.bit.ZRO = AQ_CLEAR;   </span><br><span class="line"><span class="comment">//B通道，上升计数到达，置1。计数为0，置0</span></span><br></pre></td></tr></table></figure><h3 id="SPI通讯"><a href="#SPI通讯" class="headerlink" title="SPI通讯"></a>SPI通讯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpiaRegs.SPICCR.all =<span class="number">0x0016</span>;<span class="comment">//第三位置1为自反馈模式，第四位指的是数据长度为6位</span></span><br><span class="line">SpiaRegs.SPICTL.all =<span class="number">0x0006</span>; <span class="comment">//闲置时时钟极性为低电平，传输发生在时钟信号的下降沿。</span></span><br><span class="line">SpiaRegs.SPIBRR =<span class="number">0x007F</span>;<span class="comment">//配置波特率</span></span><br><span class="line">SpiaRegs.SPIPRI.bit.FREE = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>数据传输</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;    </span><br><span class="line">     spi_xmit(sdata);<span class="comment">//传送数据</span></span><br><span class="line">     <span class="keyword">while</span>(SpiaRegs.SPIFFRX.bit.RXFFST !=<span class="number">1</span>) &#123; &#125;<span class="comment">//等待发送完成</span></span><br><span class="line">     rdata = SpiaRegs.SPIRXBUF;<span class="comment">//接收数据</span></span><br><span class="line">     sdata+=<span class="number">0x0200</span>;<span class="comment">//发送数据自增，便于观察现象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传输7位，而数据有16位，出现两边不一样的现象</p><h3 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a>ADC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AdcRegs.ADCCHSELSEQ1.bit.CONV00 = <span class="number">0x6</span>;<span class="comment">//采样通道，从00~15</span></span><br><span class="line">AdcRegs.ADCMAXCONV.bit.MAX_CONV1 = <span class="number">15</span>;<span class="comment">//采样通道数</span></span><br></pre></td></tr></table></figure><p>以下是进行初步的采样，多个通道进行平均，实现过采样，有一定的使得波形光滑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all=(AdcRegs.ADCRESULT0 &gt;&gt;4)+(AdcRegs.ADCRESULT1 &gt;&gt;4)+(AdcRegs.ADCRESULT3 &gt;&gt;4)+(AdcRegs.ADCRESULT4 &gt;&gt;4)+</span><br><span class="line">       (AdcRegs.ADCRESULT4 &gt;&gt;4)+(AdcRegs.ADCRESULT5 &gt;&gt;4)+(AdcRegs.ADCRESULT6 &gt;&gt;4)+(AdcRegs.ADCRESULT7 &gt;&gt;4)+</span><br><span class="line">       (AdcRegs.ADCRESULT8 &gt;&gt;4)+(AdcRegs.ADCRESULT9 &gt;&gt;4)+(AdcRegs.ADCRESULT10 &gt;&gt;4)+(AdcRegs.ADCRESULT11 &gt;&gt;4)+</span><br><span class="line">       (AdcRegs.ADCRESULT12 &gt;&gt;4)+(AdcRegs.ADCRESULT3 &gt;&gt;4)+(AdcRegs.ADCRESULT14 &gt;&gt;4)+(AdcRegs.ADCRESULT15 &gt;&gt;4)</span><br><span class="line">       ;</span><br></pre></td></tr></table></figure><p>一阶低通滤波实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ConversionCount&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Voltage4[ConversionCount]=<span class="number">0.98</span>*Voltage4[ConversionCount<span class="number">-1</span>]+<span class="number">0.02</span>*Voltage2[ConversionCount];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Voltage4[<span class="number">0</span>]=<span class="number">0.98</span>*Voltage4[<span class="number">1024</span>]+<span class="number">0.02</span>*Voltage2[ConversionCount];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ConversionCount == <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line">   ConversionCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ConversionCount++;</span><br></pre></td></tr></table></figure><p>对G(s)=1/(s/w+1)进行离散化，使用前向差分即可。</p><h3 id="flash运行程序"><a href="#flash运行程序" class="headerlink" title="flash运行程序"></a>flash运行程序</h3><p>这里没有实际使用过。</p><p>1：加载另一版本CMD文件，并将RAM版CMD文件右键，选择“Exclude from Build”</p><p>2：将核心代码拷贝至RAM执行（主中断内所有核心代码），先宏定义FLASH</p><p>3：将程序和代码拷贝至RAM执行,在SECTIONS中定义RAM执行段—ramfuncs”；将程序、变量定义在“ramfuncs”段中Pragma</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> FLASH</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> CODE_SECTION(MainISR,<span class="string">&quot;ramfuncs&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> CODE_SECTION(OffsetISR,<span class="string">&quot;ramfuncs&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS</title>
      <link href="/ros1/"/>
      <url>/ros1/</url>
      
        <content type="html"><![CDATA[<p>这学期选了ros相关的课程，先占个坑位</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023的奇妙旅程</title>
      <link href="/2023final/"/>
      <url>/2023final/</url>
      
        <content type="html"><![CDATA[<p>又是一年过去了，烂完的菜狗cyy又经历什么了</p><h3 id="GAME"><a href="#GAME" class="headerlink" title="GAME"></a>GAME</h3><p>Celest进行一个快乐的通关，通了1b~7b，9a的新手教程，采了点a面的草莓，死亡次数成功突破2w，回头看看，a面也就不过如此（不炼金的话。<br>和实验室的一起玩了Party，很快乐<br>搭了mc服务器，mc还得配点mod才有意思，之后凑个时间和朋友一起打龙，腾讯云的2核2g还是有点拉的啊，感觉打了mod可能更寄，之后有实力就整个3588或者树莓派5来开下，但也得等明年吧<br>在浣熊市警察局迷路了半年，弹尽粮绝，还是什么时候重新开个档吧。<br>年初的时候一直在当当当，通了三个结局，之后再把修罗结局通遍。<br>入坑了粥，之会抄作业，有了MAA确实好舒服，希望什么时候能够成为一个contributer<br>搅拌器真好玩（）</p><h3 id="LEARN"><a href="#LEARN" class="headerlink" title="LEARN"></a>LEARN</h3><p>基本上一整年都是和stm32打交道，从比赛，再到单片机的课程，都是裸机，看看什么时候能够玩玩系统。<br>中间玩到了arduinouno，esp8266这些有意思的单片机，确实好方便简单，玩了玩树莓派。<br>课上学了Figma，设计界面，组队搓了个医疗相关的APP界面，完全没艺术细胞（），说不出感觉的简陋<br>断断续续地刷了leetcode几百道题，水平不够，现在太久没刷，又回到过去了。<br>三分钟热度学了点vue，然后又因考试就无限延期了QAQ<br>略微玩明白了solldwork建模，画PCB，希望这之后能给我点帮助吧。</p><h3 id="LIFE"><a href="#LIFE" class="headerlink" title="LIFE"></a>LIFE</h3><p>平平无奇，但也是借助了因竞赛认识了许多人，跟着一起干饭，才开始慢慢的了解附近，否则真可能在学校里平平无奇封闭无聊地过了个四年<br>也确实看清楚了一些现实，做好自己就好</p><h3 id="FUTURE"><a href="#FUTURE" class="headerlink" title="FUTURE"></a>FUTURE</h3><p>能够学习更多有意思的东西<br>能够玩到更多有意思的游戏<br>好好学习，努力上岸<br>努力锻炼，尽可能引体向上有分QAQ<br>多写点有意思有用的博客，一定要把怎么方便地加图片搞上，如果之后写得多的话，一堆文字云里雾里<br>butterfly整得好就继续，不好就换个简洁点的主题吧</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>这一年遗憾很多，人要烂完了，希望2024能改变些吧，还得继续努力加油吧，希望别太迟吧，唉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的mc服务器搭建</title>
      <link href="/mcserver/"/>
      <url>/mcserver/</url>
      
        <content type="html"><![CDATA[<h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><p>更新于2023.10.21  MC版本1.20  Ubuntu22.0LTS 主打教程拼拼凑凑，遇到的问题也写下</p><hr><p>首先你需要一个服务器，现在最低也都是2核2G，差不多也带的动4人左右了（疯狂开图cpu可能受不了，延迟就会大，还那些巨型矿洞也可能加载不好，一开始还以为矿洞是露天的（）），当然配置越高越好doge</p><p>通过服务器提供商打开服务器，并安装Ubuntu系统。保存好私钥。（放行端口22）</p><p>然后在服务器防火墙开端口25565，否则开服后照样找不到服务器</p><p>电脑安装Tabby，这是开源的终端。可以在GitHub上下载。</p><p>通过SSH的方式连接服务器。根据服务器后台查看用户名，一般是ubuntu。（但是注意Tabby中默认是root，没改连不上）</p><p>Linux默认是没密码的，但想进入root需要密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">passwd</span> <span class="string">root</span>    <span class="comment">##设置密码</span></span><br><span class="line"><span class="string">su</span> <span class="string">root</span><span class="comment">##进入root</span></span><br></pre></td></tr></table></figure><p>密码都是不显示的，输完放心按回车就行</p><p>然后安装各种东西，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span><span class="comment">##更新软件包列表</span></span><br><span class="line"><span class="string">apt-get</span> <span class="string">install</span> <span class="string">zip</span><span class="comment">##解压和压缩</span></span><br><span class="line"><span class="string">apt-get</span> <span class="string">install</span> <span class="string">unzip</span></span><br><span class="line"><span class="string">apt-get</span> <span class="string">install</span> <span class="string">screen</span><span class="comment">##自带，不需安装，维持程序运行软件</span></span><br><span class="line"><span class="string">apt-get</span> <span class="string">install</span> <span class="string">libcurl4-openssl-dev</span><span class="comment">##服务端网络通信依赖库</span></span><br></pre></td></tr></table></figure><h5 id="java环境"><a href="#java环境" class="headerlink" title="java环境"></a>java环境</h5><p>1.16版本及之前需Java8，1.17需Java16，1.18及以上需Java17，那么本文的1.20则需要Java17</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">openjdk-8-jdk</span> <span class="comment">##Java8</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">openjdk-16-jdk</span> <span class="comment">##Java16</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">openjdk-17-jdk</span> <span class="comment">##Java17</span></span><br></pre></td></tr></table></figure><p>检查安装是否正确</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">java</span> <span class="string">-version</span></span><br></pre></td></tr></table></figure><h5 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">/home</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">minecraft</span> <span class="comment">##新建叫minecraft的文件夹</span></span><br><span class="line"><span class="string">cd</span> <span class="string">./minecraft</span>  <span class="comment">##进入该文件夹</span></span><br></pre></td></tr></table></figure><p>进入MC官网获取服务器核心下载链接：<strong><a href="https://www.minecraft.net/zh-hans/download/server">https://www.minecraft.net/zh-hans/download/server</a></strong></p><p>在刚刚创建的minecraft文件夹中输入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">wget</span><span class="string">https://www.minecraft.net/zh-hans/download/server</span></span><br></pre></td></tr></table></figure><h5 id="创建screen"><a href="#创建screen" class="headerlink" title="创建screen"></a>创建screen</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">screen</span> <span class="string">-S</span> <span class="string">Minecraft</span> </span><br></pre></td></tr></table></figure><p>这里的screen相当于一个分屏，能够让你即使退出服务器的远程连接，MC的服务端也能正常运行。</p><p>退出screen：Ctrl+A+D</p><p>注意非root和root的screen区分开的</p><p>进入已创建的screen</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">screen</span> <span class="string">-r</span> <span class="string">Minecraft</span> </span><br></pre></td></tr></table></figure><p>如果忘了srceen叫什么，下面指令得到已有sreen</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">screen</span> <span class="string">-ls</span></span><br></pre></td></tr></table></figure><h5 id="运行服务器核心"><a href="#运行服务器核心" class="headerlink" title="运行服务器核心"></a>运行服务器核心</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">java</span> <span class="string">-Xmx1024M</span> <span class="string">-Xms1024M</span> <span class="string">-jar</span> <span class="string">&lt;服务器核心的文件名&gt;</span> <span class="string">nogui</span></span><br></pre></td></tr></table></figure><p>-Xmx1024M：表示服务器最<strong>大</strong>运行内存为1024M</p><p>-Xms1024M：表示服务器最<strong>小</strong>运行内存为1024M</p><p>但现在运行后会报错，需要同意协议</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">eula.txt</span></span><br></pre></td></tr></table></figure><p>然后按一下键盘上的“A”，调整为输入模式；通过上下左右键，调整光标位置，把最后一行的“false”修改为”true”</p><p>修改完成后按下“Esc”，输入“:wq”</p><p>修改服务器配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">server.properties</span></span><br></pre></td></tr></table></figure><p>具体在wiki上看;<a href="https://minecraft.fandom.com/zh/wiki/Server.properties">server.properties - Minecraft Wiki，最详细的我的世界百科 (fandom.com)</a></p><p>修改保存同上。</p><p>改好后再次运行服务器核心，看到如下代码，则说明成功 1.20要90s左右</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Done</span> <span class="string">(xx,xxs)!</span> <span class="string">For</span> <span class="string">help,</span> <span class="string">type</span> <span class="string">&quot;help&quot;</span></span><br></pre></td></tr></table></figure><p>然后进入，输上ip就能快乐地玩耍了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCB软件初识</title>
      <link href="/20230722/"/>
      <url>/20230722/</url>
      
        <content type="html"><![CDATA[<p>到现在用过画PCB的软件有AD和嘉立创，两种都挺好的，这里写一下学习使用的过程。</p><h4 id="Altium-Design"><a href="#Altium-Design" class="headerlink" title="Altium Design"></a>Altium Design</h4><p>10多天没用ad，在打开ad时，对pcbdoc懵逼了会，去回顾了下，还是得写点Σ( ° △ °|||)︴<br>用的AD版本是20.0.13,有个懒狗不想汉化</p><p>内容暂时是怎么改一个板子，从0开始也不会🤣</p><h5 id="从看pcb开始"><a href="#从看pcb开始" class="headerlink" title="从看pcb开始~"></a>从看pcb开始~</h5><p>按住右键，拖动整体，按住滚轮，鼠标上移放大，下移缩小<br>点击数字键2，3可以将板子变成2D，3D,小数字键盘没用<br>翻转板子ctrl+f，或者按V，出现菜单栏，选择flip board，实际使用是在3D视角翻转，2D也看不出什么<br>大部分板子有覆铜，导致看走线有点困难，右键选择Polygon Actions-&gt;Shelve All,光是看想恢复直接撤回，若有改动Tools-&gt;Polygon Pour-&gt;Polygon Pour Manager,把所有的勾取消。</p><p>R+M可以选择两点，测量两点之间距离</p><h5 id="SchDoc"><a href="#SchDoc" class="headerlink" title="SchDoc"></a>SchDoc</h5><p>如果一个电路不接东西，比如芯片一个引脚打算不接东西，右键，Place-&gt;Directives-&gt;Generic No REC，要用的话，就把那个叉叉删了<br>想给板子多几个相关功能引脚，左键框住这部分原理图然后复制粘贴，配好引脚后Tools-&gt;Annotation-&gt;Annotation Schematics Quietly<br>如果暂时不用某个电路，又嫌删了可惜Place-&gt;Directives-&gt;Complie masks，框选住</p><p>因为线路太复杂，所以选用网络标签Place-&gt;Net label,AD就单纯字符在线路上，嘉立创的是有个箭头</p><h5 id="PcbDoc"><a href="#PcbDoc" class="headerlink" title="PcbDoc"></a>PcbDoc</h5><p>貌似每个绿色十字功能不同<br>拖动元件时点L，可以将它放到另外一面<br>过孔大小无法更改可能是规则问题，需要自行更改<br>T+G，可以从引脚引出线<br>添加泪滴Tools-&gt;Tear Drops,自动给所有引脚（有线的）加泪滴<br>如果添加某个电路，在PcbDoc某个元器件不见了，那就是你没这个的封装，恰好板子也有的话，选剪切，复制没用也很奇怪，创建新的PcbDoc，粘贴，导出为封装库即可  xxx.prblib<br>如果前面覆铜进行了Shelve All，先让它显示出来，显示后板子上一堆的绿色叉叉正常的，Polygon Actions-&gt;Repour All，同理，当你遇到了移动任一一个元器件或者导线，都出现绿色叉叉，说明是隐藏的覆铜</p><p>若要看网络，ctrl+鼠标左键使其高亮，退出shift+c</p><p>加点什么文字的话选中丝印层（Top Overlay），点击Place-&gt;String,然后就快乐地改</p><h4 id="嘉立创"><a href="#嘉立创" class="headerlink" title="嘉立创"></a>嘉立创</h4><p>这里用的是普通版，完全是中文就很舒服，操作就也挺简单，但也磕磕绊绊地画了个两层板</p><hr><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><p>之后再学着画更高层地板子，先让我提升下我的焊功再说()</p>]]></content>
      
      
      
        <tags>
            
            <tag> PCB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派食用指北</title>
      <link href="/raspberry/"/>
      <url>/raspberry/</url>
      
        <content type="html"><![CDATA[<p>本文使用的是32位和64位bullseye混杂的内容，树莓派4b，算是一步步摸的记录，对遇到的问题做个整合，装troch时发现要64位，后面内容还是64吧</p><h3 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h3><p>首先是下载镜像和烧录软件</p><p>由于镜像较大，且在国外，镜像通过清华镜像源下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_full_armhf/images/">Index of /raspberry-pi-os-images/raspios_full_armhf/images/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>烧录软件：<a href="https://www.raspberrypi.com/software/">Raspberry Pi OS – Raspberry Pi</a></p><p>最新版烧录软件应该是自带下载镜像的，但是如果和我一样最新安装不了的话，找网上旧点版本(不带下载镜像)，系统就从镜像站下载吧</p><p>烧录完后，插入卡槽，插入hdmi，启动(这里一定要先插hdmi再通电，树莓派默认不能热插拔)，进行对网络，语言什么的配置，配置完后，进行重启</p><p>如果不幸重启后黑屏，往往是屏幕分辨率问题，修改/boot/config.txt的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//2K屏幕，自己实际用到的</span></span><br><span class="line"><span class="string">hdmi_force_hotplug=1</span>  <span class="string">//打开热插拔，开了也好像没用</span></span><br><span class="line"><span class="string">hdmi_group=2</span></span><br><span class="line"><span class="string">hdmi_mode=85</span></span><br><span class="line"><span class="string">//4K屏幕，没试过</span></span><br><span class="line"><span class="string">hdmi_force_hotplug=1</span>  <span class="string">//打开热插拔</span></span><br><span class="line"><span class="string">hdmi_group=2</span></span><br><span class="line"><span class="string">hdmi_mode=95</span></span><br></pre></td></tr></table></figure><p>如果遇到第一次开机没弹出来任何东西的话（第一次开机不是要设置语言什么的），没找出原因，建议换个版本镜像烧录，可能是显示器的问题，网上查到有类似的换了个2K（原本4K）就好了</p><p>开启VNC </p><p>左上角树莓派图标—&gt;首选项（perference）—&gt; Raspberry Pi Configuration—&gt;Interfaces，开启后，电脑和树莓派位与同一个局域网，通过命令来得到树莓派的IP地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ifconfig</span></span><br></pre></td></tr></table></figure><p>在通过VNC Viewer输入树莓派的IP地址，进行连接，输入树莓派的用户名和密码，成功连接，这时就无需树莓派外接屏幕了</p><p>但树莓派的IP不一定是固定的，所以连不上时记得看一下手机热点连接的树莓派IP,部分手机（特指某粮食作物手机，貌似高版本安卓也是）无法显示IP的话，问题不大，先确保电脑，树莓派和手机的热点连上，打开电脑命令行输入:<code>ping raspberrypi -4</code>。-4指的是IPv4地址</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>树莓派的默认源在国外，下载较慢，执行以下命令，32位系统与64位系统有不同</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">nano</span> <span class="string">/etc/apt/sources.list</span></span><br></pre></td></tr></table></figure><p>pip换源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pip</span> <span class="string">config</span> <span class="string">set</span> <span class="string">global.index-url</span> <span class="string">https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>有些包仍会到原有镜像下载，pip下载有时间的限制，超时就直接报错，遇到报错的，建议这时在自己电脑上进入那个网站下载，通过vnc传输进来</p><p>将原有的内容通过#注释掉，加入以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//armhf为32位</span></span><br><span class="line"><span class="string">deb</span> [<span class="string">arch=armhf</span>] <span class="string">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</span> <span class="string">bullseye</span> <span class="string">main</span> <span class="string">non-free</span> <span class="string">contrib</span> <span class="string">rpi</span> </span><br><span class="line"><span class="string">deb-src</span> <span class="string">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</span> <span class="string">bullseye</span> <span class="string">main</span> <span class="string">non-free</span> <span class="string">contrib</span> <span class="string">rpi</span> </span><br></pre></td></tr></table></figure><h3 id="gpio口"><a href="#gpio口" class="headerlink" title="gpio口"></a>gpio口</h3><p>WiringPi是应用于树莓派平台的GPIO控制库函数，树莓派具有26个普通输入和输出引脚。在这26个引脚中具有8个普通输入和输出管脚，这8个引脚既可以作为输入管脚也可以作为输出管脚。除此之外，树莓派还有一个2线形式的I2C、一个4线形式的SPI和一个UART接口。树莓派上的I2C和SPI接口也可以作为普通端口使用。</p><p>4b不支持sudo apt-get install wiringPi进行安装，32位按以下命令安装：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">wget</span> <span class="string">https://project-downloads.drogon.net/wiringpi-latest.deb</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">dpkg</span> <span class="string">-i</span> <span class="string">wiringpi-latest.deb</span></span><br></pre></td></tr></table></figure><p>命令行输入<code>gpio readall</code>即可看见引脚功能</p><h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><p>从树莓派的相关资料我们可以看到，树莓派有两个串口可以使用，一个是硬件串口（/dev/ttyAMA0）,另一个是mini串口（/dev/ttyS0）。硬件串口有单独的波特率时钟源，性能好，稳定性强；mini串口功能简单，稳定性较差，波特率由CPU内核时钟提供，受内核时钟影响，所以这里使用硬件串口，以下内容是如何调用硬件串口。</p><p>输入sudo raspi-config，关闭串口登录功能，打开串口调试功能</p><p>对config.txt进行修改，输入sudo nano /boot/config.txt ，添加下面两行代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dtoverlay=miniuart-bt</span></span><br><span class="line"><span class="string">force_turbo=1</span></span><br></pre></td></tr></table></figure><p>输入以下命令，禁用控制台功能，串口用于通讯，或者在开启VNC那个地方也有同样功能的开关</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">stop</span> <span class="string">serial-getty@ttyAMA0.service</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">disable</span> <span class="string">serial-getty@ttyAMA0.service</span></span><br></pre></td></tr></table></figure><p>重启树莓派后，输入<code>ls /dev -al</code> 后，看到以下内容，说明交换成功</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">lrwxrwxrwx</span>   <span class="number">1</span> <span class="string">root</span> <span class="string">root</span>           <span class="number">7</span>  <span class="number">3</span><span class="string">月</span> <span class="number">14</span> <span class="number">11</span><span class="string">:32</span> <span class="string">serial0</span> <span class="string">-&gt;</span> <span class="string">ttyAMA0</span></span><br><span class="line"><span class="string">lrwxrwxrwx</span>   <span class="number">1</span> <span class="string">root</span> <span class="string">root</span>           <span class="number">5</span>  <span class="number">3</span><span class="string">月</span> <span class="number">14</span> <span class="number">11</span><span class="string">:32</span> <span class="string">serial1</span> <span class="string">-&gt;</span> <span class="string">ttyS0</span></span><br></pre></td></tr></table></figure><p>打开电脑串口助手，设置好相同波特率，用USB转ttl连接上，以下代码现象为先向串口发送，然后命令行显示串口发送的数据，从网上复制一段串口传输代码例程，运行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">import</span> <span class="string">serial</span></span><br><span class="line"><span class="string">import</span> <span class="string">time</span></span><br><span class="line"><span class="string">ser</span> <span class="string">=</span> <span class="string">serial.Serial(&quot;/dev/ttyAMA0&quot;,115200)</span></span><br><span class="line"><span class="string">if</span> <span class="string">not</span> <span class="string">ser.isOpen():</span></span><br><span class="line">    <span class="string">print(&quot;open</span> <span class="string">failed&quot;)</span></span><br><span class="line"><span class="attr">else:</span></span><br><span class="line">    <span class="string">print(&quot;open</span> <span class="attr">success:</span> <span class="string">&quot;)</span></span><br><span class="line"><span class="string">    print(ser)</span></span><br><span class="line"><span class="string">ser.write(b&#x27;piRaspberry pi&#x27;)             # 向串口发送Raspberry pi</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    size = ser.inWaiting()               # 获得缓冲区字符</span></span><br><span class="line"><span class="string">    if size != 0:</span></span><br><span class="line"><span class="string">        response = ser.read(size)        # 读取内容并显示</span></span><br><span class="line"><span class="string">        print (response)        </span></span><br><span class="line"><span class="string">        ser.flushInput()                 # 清空接收缓存区</span></span><br><span class="line"><span class="string">        time.sleep(0.1)                  # 软件延时</span></span><br></pre></td></tr></table></figure><h3 id="导入opencv库"><a href="#导入opencv库" class="headerlink" title="导入opencv库"></a>导入opencv库</h3><h4 id="32位-装不了torch"><a href="#32位-装不了torch" class="headerlink" title="32位(装不了torch)"></a>32位(装不了torch)</h4><p>先在命令行中查看Linux架构，python版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">uname</span> <span class="string">-a</span>   <span class="string">//Linux架构</span></span><br><span class="line"><span class="string">python</span>     <span class="string">//python版本</span></span><br></pre></td></tr></table></figure><p>自己的树莓派的架构，记下armv7，还有armv6的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Linux</span> <span class="string">raspberrypi</span> <span class="number">5.15</span><span class="number">.84</span><span class="string">-v7l+</span> <span class="comment">#1613 SMP Thu Jan 5 12:01:26 GMT 2023 armv7l GNU/Linux</span></span><br></pre></td></tr></table></figure><p>下载所需的whl包，进入该网站<a href="https://piwheels.org/project/opencv-python/#install">piwheels - opencv-python</a>，点击加号，选择文件，下载</p><p>包名基本上为这种格式opencv_python-4.6.0.66-cp39-cp39-linux_armv7l.whl，这种说明是cp39对应python3.9，armv7是由我们在上面通过命令行查询得知的，下载后通过VNC送到树莓派上，通过pip安装</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">Desktop</span> <span class="comment">#取决于文件位置</span></span><br><span class="line"><span class="string">pip</span> <span class="string">install</span> <span class="string">opencv</span>  <span class="comment">#然后按tab自动补全</span></span><br></pre></td></tr></table></figure><p>安装成功后，极大可能导入时报错，由于numpy的版本问题，不建议使用pip在线安装，自己尝试使用pip3 install -U numpy ，一直显示安装包哈希值对不上，从<a href="https://www.piwheels.org/simple/numpy/下载合适版本，与opencv的安装方法类似，我选用的是numpy-1.23.0-cp39-cp39-linux_armv7l.whl">https://www.piwheels.org/simple/numpy/下载合适版本，与opencv的安装方法类似，我选用的是numpy-1.23.0-cp39-cp39-linux_armv7l.whl</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">Desktop</span> <span class="comment">#取决于文件位置</span></span><br><span class="line"><span class="string">pip</span> <span class="string">install</span> <span class="string">numpy</span>  <span class="comment">#然后按tab自动补全</span></span><br></pre></td></tr></table></figure><p>导入cv2后，不报错，成功，32位到这就没了，然后换到了64位。</p><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><p>就很方便，一句即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pip</span> <span class="string">install</span> <span class="string">opencv-python</span> <span class="string">-i</span> <span class="string">https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><h3 id="开机自启程序"><a href="#开机自启程序" class="headerlink" title="开机自启程序"></a>开机自启程序</h3><p>网上有很多开机自启的方法，写下自己实际使用过的</p><h4 id="编辑rc-local实现自启-对于opencv窗口有点问题"><a href="#编辑rc-local实现自启-对于opencv窗口有点问题" class="headerlink" title="编辑rc.local实现自启(对于opencv窗口有点问题)"></a>编辑rc.local实现自启(对于opencv窗口有点问题)</h4><p>以rc.local实现自启的程序在sudo下进行，就是任何命令以sudo起头，所以按照上面安装的包，在sudo下重新装一遍TT</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">nano</span> <span class="string">/etc/rc.local</span></span><br></pre></td></tr></table></figure><p>然后在exit 0输入以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">python3</span> <span class="string">xxxxx(你要运行的python文件的绝对路径)</span></span><br></pre></td></tr></table></figure><p>如果带的是while死循环的话，结尾补上一个&amp;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">python3</span> <span class="string">xxxxx(你要运行的python文件的绝对路径)</span> <span class="string">&amp;</span></span><br></pre></td></tr></table></figure><p>如果发现没有如期自启动，输入以下命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">systemctl</span> <span class="string">status</span> <span class="string">rc-local</span></span><br></pre></td></tr></table></figure><p>根据其报错来搜索对应问题，开机自启对opencv的imshow存在点问题，这还是之后再找吧，对于适用于有无桌面的方法，这种窗口可能不适用。</p><h4 id="通过桌面启动"><a href="#通过桌面启动" class="headerlink" title="通过桌面启动"></a>通过桌面启动</h4><p>在在/home/pi/.config/下创建autostart(注意：pi不一定是pi，为用户名这是根据你首次开机时取的)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">/home/pi/.config/</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">autostart</span></span><br></pre></td></tr></table></figure><p>在autostart目录下创建my.desktop，并编辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">autostart</span></span><br><span class="line"><span class="string">nano</span> <span class="string">my.desktop</span></span><br></pre></td></tr></table></figure><p>往其中加入以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Desktop</span> <span class="string">Entry</span>]</span><br><span class="line"><span class="string">Type=Application</span></span><br><span class="line"><span class="string">Name=Test</span></span><br><span class="line"><span class="string">Exec=/usr/bin/python3</span> <span class="string">/home/pi/Yourpy.py</span></span><br></pre></td></tr></table></figure><p>将下面代码复制到你的my.desktop文件中，Exec变量更改为你要运行的文件。</p><p>现象为一开机就会弹出对应程序，如果cv之类while死循环窗口，按q退出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何成为solidwork拉伸切除大师</title>
      <link href="/20230627/"/>
      <url>/20230627/</url>
      
        <content type="html"><![CDATA[<p>保存是一个好习惯，solidwork太容易什么地方错误操作，导致成果gg<br>双击滚轮，回归最初的视角。<br>按住滚轮，转动视角。<br>对一个面右键，选择图案（一个面，带有朝上的箭头），正视于这个面。<br>随便拿一个草图中的工具，画出随便一个封闭图形，选择菜单栏的 插入—台体，选择需要的厚度，就能形成对应形状的立体图形。<br>同理，在已有立体图形的面上，画封闭图形，插入—切除—拉伸，选择深度，切除出所需的。<br>若仅仅只要弧形，选择草图的样条曲线（图标是横着放的s）<br>装配<br>选择装配体—插入零部件，加入零件<br>点击配合，选择所需，进行配合，平行和重合稍微区分下，默认是重合<br>实际solidwork不考虑实际情况，例如，两个孔，一个面，会有两种情况，一个是正确的，另一种是两个板子重合在一起，这时需要适当旋转下零件。总之不对就慢慢调角度。<br>配合要求尺寸完全对的上的<br>多用镜像偷懒~</p>]]></content>
      
      
      
        <tags>
            
            <tag> solidwork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组相关的一些</title>
      <link href="/20230522/"/>
      <url>/20230522/</url>
      
        <content type="html"><![CDATA[<p>  太弱了，每次遇到数组都要查一遍，稍微写下，希望能加深下吧</p><hr><h5 id="一个数组题"><a href="#一个数组题" class="headerlink" title="一个数组题"></a>一个数组题</h5><p><a href="https://leetcode.cn/problems/difference-of-number-of-distinct-values-on-diagonals/description/">6440. 对角线上不同值的数量差</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">differenceOfDistinctValues</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        l=[]</span><br><span class="line">        r=[]</span><br><span class="line">        n=<span class="built_in">len</span>(grid)</span><br><span class="line">        m=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        ans = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,m):</span><br><span class="line">                l=[]</span><br><span class="line">                r=[]</span><br><span class="line">                tempx=j-<span class="number">1</span></span><br><span class="line">                tempy=i-<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> tempx&gt;=<span class="number">0</span> <span class="keyword">and</span> tempy&gt;=<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> grid[tempy][tempx] <span class="keyword">not</span> <span class="keyword">in</span> l:</span><br><span class="line">                        l.append(grid[tempy][tempx])</span><br><span class="line">                    tempx-=<span class="number">1</span></span><br><span class="line">                    tempy-=<span class="number">1</span></span><br><span class="line">                tempx=j+<span class="number">1</span></span><br><span class="line">                tempy=i+<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> tempx&lt;m <span class="keyword">and</span> tempy&lt;n:</span><br><span class="line">                    <span class="keyword">if</span> grid[tempy][tempx] <span class="keyword">not</span> <span class="keyword">in</span> r:</span><br><span class="line">                        r.append(grid[tempy][tempx])</span><br><span class="line">                    tempx+=<span class="number">1</span></span><br><span class="line">                    tempy+=<span class="number">1</span></span><br><span class="line">                ans[i][j]=<span class="built_in">abs</span>(<span class="built_in">len</span>(l)-<span class="built_in">len</span>(r))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ans=[]</span><br><span class="line">ans1=[<span class="number">0</span>]*n    <span class="comment">##一维</span></span><br><span class="line">ans2=[[<span class="number">0</span>]*n]*n    <span class="comment">##虚假的二维，改动一个元素的值，实际会带动n个值得改变，浅拷贝</span></span><br><span class="line">ans3=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment">##产生实际可用的二维，确定长度的数组</span></span><br></pre></td></tr></table></figure><h5 id="加入和删除"><a href="#加入和删除" class="headerlink" title="加入和删除"></a>加入和删除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans.append(<span class="string">&quot;add&quot;</span>)</span><br><span class="line"><span class="keyword">del</span> ans[n]   <span class="comment">##删去索引为n的元素</span></span><br></pre></td></tr></table></figure><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans.sort()  <span class="comment">##reverse = True 降序， reverse = False 升序（默认）</span></span><br><span class="line"><span class="comment">##可以利用lambda，自定义排序方式</span></span><br></pre></td></tr></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(ans)):</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(ans):<span class="comment">##索引，元素</span></span><br><span class="line"><span class="comment">##二维</span></span><br><span class="line">n=<span class="built_in">len</span>(grid)</span><br><span class="line">m=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,m):</span><br></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&quot;qqqqqqqqqqqqq&quot;</span><span class="comment">##字符串操作类似，但不能进行删改，需转化</span></span><br><span class="line">s1=<span class="built_in">list</span>(s)</span><br><span class="line">s2=<span class="string">&quot;&quot;</span>.join(s1)<span class="comment">##回到字符串</span></span><br></pre></td></tr></table></figure><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans[-<span class="number">1</span>]<span class="comment">##为数组最后一个元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vhdl</title>
      <link href="/vhdl/"/>
      <url>/vhdl/</url>
      
        <content type="html"><![CDATA[<p><del>做个备份，怕打了半天，又丢了</del></p><p>为了方便，均为小写，quartus版本为13.1</p><hr><h5 id="四位频率计"><a href="#四位频率计" class="headerlink" title="四位频率计"></a>四位频率计</h5><h6 id="3-8译码器"><a href="#3-8译码器" class="headerlink" title="3-8译码器"></a>3-8译码器</h6><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> decoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Port</span>(aa:<span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">2</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">qq:<span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>));</span><br><span class="line"><span class="keyword">end</span> decoder;</span><br><span class="line"><span class="keyword">architecture</span> one <span class="keyword">of</span> decoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(aa)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span> aa <span class="keyword">is</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;000&quot;</span>=&gt;qq&lt;=<span class="string">&quot;00000001&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;001&quot;</span>=&gt;qq&lt;=<span class="string">&quot;00000010&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;010&quot;</span>=&gt;qq&lt;=<span class="string">&quot;00000100&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;011&quot;</span>=&gt;qq&lt;=<span class="string">&quot;00001000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;100&quot;</span>=&gt;qq&lt;=<span class="string">&quot;00010000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;101&quot;</span>=&gt;qq&lt;=<span class="string">&quot;00100000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;110&quot;</span>=&gt;qq&lt;=<span class="string">&quot;01000000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;111&quot;</span>=&gt;qq&lt;=<span class="string">&quot;10000000&quot;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> one;</span><br></pre></td></tr></table></figure><h6 id="十进制加法计数器"><a href="#十进制加法计数器" class="headerlink" title="十进制加法计数器"></a>十进制加法计数器</h6><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> cnt10 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(clk: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">clr:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">cs:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">qq: <span class="keyword">buffer</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">co:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> cnt10;</span><br><span class="line"><span class="keyword">architecture</span> one <span class="keyword">of</span> cnt10 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(clk,clr,cs)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(clr=<span class="string">&#x27;1&#x27;</span>)<span class="keyword">then</span></span><br><span class="line">qq&lt;=<span class="string">&quot;0000&quot;</span>;</span><br><span class="line"><span class="keyword">elsif</span>(clk<span class="symbol">&#x27;event</span> <span class="keyword">and</span> clk=<span class="string">&#x27;1&#x27;</span>)<span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> (cs=<span class="string">&#x27;1&#x27;</span>)<span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span>(qq=<span class="number">9</span>)<span class="keyword">then</span></span><br><span class="line">qq&lt;=<span class="string">&quot;0000&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">qq&lt;=qq+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">process</span>(qq)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(qq=<span class="number">9</span>)<span class="keyword">then</span></span><br><span class="line">co&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">co&lt;=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> one;</span><br></pre></td></tr></table></figure><h6 id="锁存"><a href="#锁存" class="headerlink" title="锁存"></a>锁存</h6><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> lock <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(le : <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">dd: <span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">qq: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>));</span><br><span class="line"><span class="keyword">end</span> lock;</span><br><span class="line"><span class="keyword">architecture</span> one <span class="keyword">of</span> lock <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(le,dd)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(le=<span class="string">&#x27;1&#x27;</span>)<span class="keyword">then</span></span><br><span class="line">qq&lt;=dd;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> one;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="译码，LED显示"><a href="#译码，LED显示" class="headerlink" title="译码，LED显示"></a>译码，LED显示</h6><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> decoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Port</span>(din:<span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">led7s:<span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">6</span> <span class="keyword">downto</span> <span class="number">0</span>));</span><br><span class="line"><span class="keyword">end</span> decoder;</span><br><span class="line"><span class="keyword">architecture</span> one <span class="keyword">of</span> decoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(din)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span> din <span class="keyword">is</span></span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0000&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;1000000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0001&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;1111001&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0010&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0100100&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0011&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0110000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0100&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0011001&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0101&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0010010&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0110&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0000010&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;0111&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;1111000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1000&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0000000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1001&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0010000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1010&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0001000&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1011&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0000011&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1100&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;1000110&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1101&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0100001&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1110&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0000110&quot;</span>;</span><br><span class="line"><span class="keyword">when</span><span class="string">&quot;1111&quot;</span>=&gt;led7s&lt;=<span class="string">&quot;0001110&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">others</span>=&gt;led7s&lt;=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>LED存在共阴共阳问题，若显示不对，取相反即可</p><p>若仍然不对，校对引脚，<del>还是不行的话，看着改译码信号，能亮了肯定有对应信号让它亮</del></p><h6 id="四位频率计的control模块"><a href="#四位频率计的control模块" class="headerlink" title="四位频率计的control模块"></a>四位频率计的control模块</h6><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> control <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(clk: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">cs,clr,le: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> control;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> behav <span class="keyword">of</span> control <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> current_state,next_state:<span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">constant</span> st0: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;0011&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st1: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;0010&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st2: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;0110&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st3: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;0111&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st4: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;0101&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st5: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;0100&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st6: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;1100&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st7: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;1101&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st8: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;1111&quot;</span>;</span><br><span class="line"><span class="keyword">constant</span> st9: <span class="built_in">std_logic_vector</span>:=<span class="string">&quot;1110&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">com1:<span class="keyword">process</span>(current_state)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span> current_state <span class="keyword">is</span></span><br><span class="line"><span class="keyword">when</span> st0=&gt;next_state&lt;=st1;clr&lt;=<span class="string">&#x27;1&#x27;</span>;cs&lt;=<span class="string">&#x27;0&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st1=&gt;next_state&lt;=st2;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st2=&gt;next_state&lt;=st3;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st3=&gt;next_state&lt;=st4;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st4=&gt;next_state&lt;=st5;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st5=&gt;next_state&lt;=st6;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st6=&gt;next_state&lt;=st7;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st7=&gt;next_state&lt;=st8;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st8=&gt;next_state&lt;=st9;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;1&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> st9=&gt;next_state&lt;=st0;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;0&#x27;</span>;le&lt;=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">others</span>=&gt;next_state&lt;=st0;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;0&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span> com1;</span><br><span class="line"></span><br><span class="line">reg:<span class="keyword">process</span>(clk)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(clk<span class="symbol">&#x27;event</span> <span class="keyword">and</span> clk=<span class="string">&#x27;1&#x27;</span>)<span class="keyword">then</span></span><br><span class="line">current_state&lt;=next_state;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span> reg;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然在同一条里，clr，cs，le并不是同时变化的，竞争冒险<br>实际中，le锁存信号还为1时，clr清零信号为1，现实为绝大部分时间为0，LED只有在le那段时间显示实际数字</p><p>解决方法：加个三个都为0的状态即可</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> st0=&gt;next_state&lt;=st1;clr&lt;=<span class="string">&#x27;1&#x27;</span>;cs&lt;=<span class="string">&#x27;0&#x27;</span>;le&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">when</span> st9=&gt;next_state&lt;=st0;clr&lt;=<span class="string">&#x27;0&#x27;</span>;cs&lt;=<span class="string">&#x27;0&#x27;</span>;le&lt;=<span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vhdl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32</title>
      <link href="/stm32/"/>
      <url>/stm32/</url>
      
        <content type="html"><![CDATA[<p>原来写得太无知了，实在看不下去,在学校单机机课程了解了些，就总结下吧</p><h4 id="一些有用的小东西"><a href="#一些有用的小东西" class="headerlink" title="一些有用的小东西"></a>一些有用的小东西</h4><h5 id="C99-Mode"><a href="#C99-Mode" class="headerlink" title="C99 Mode"></a>C99 Mode</h5><p>这个模式可以不用将变量定义到头部，移植的代码如果报一堆错误往往是这个导致的<br>位置： Target for Option -&gt;C/C++ -&gt; C99 Mode</p><h5 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h5><p>这需要单片机插上jlink使用，点击进入，右键变量，加入Watcher，即可看见其在程序中发生的变化</p><h5 id="JLINK"><a href="#JLINK" class="headerlink" title="JLINK"></a>JLINK</h5><p>实际也是个103，后续在电脑上烧录个固件也能成个jlink</p><h5 id="头文件不存在"><a href="#头文件不存在" class="headerlink" title="头文件不存在"></a>头文件不存在</h5><p>路径要包括.h文件的位置<br>位置: Target for Option -&gt;C/C++ -&gt; Include Path</p><h5 id="找不到STlink"><a href="#找不到STlink" class="headerlink" title="找不到STlink"></a>找不到STlink</h5><p>可能线没插牢，或者可能用的是jlink，要进行更换<br>位置：Target for Option -&gt;Debug   Use中换成Jlink，然后点击Setting，Port进行更换</p><h5 id="使能开关"><a href="#使能开关" class="headerlink" title="使能开关"></a>使能开关</h5><p>需要时开启，不需要时关闭，能够解决许多奇奇怪怪的问题</p><h5 id="函数定义跳转"><a href="#函数定义跳转" class="headerlink" title="函数定义跳转"></a>函数定义跳转</h5><p>跳转不了定义？对于一份新下载的代码，先编译，再右键Go to definition of xxxxxx，</p><p>或者可能没生成编译文件，Target for Option -&gt;output，点击Create Executable</p><h5 id="寻找报错"><a href="#寻找报错" class="headerlink" title="寻找报错"></a>寻找报错</h5><p>在下面输出信息右键。Find in List，方向为向上。</p><h4 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h4><p>部分引脚能忍受0~5V，具有ADC功能的引脚只能0~3.3V<br>GPIO配置是通过结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> GPIO_Pin;              <span class="comment">/*!&lt; Specifies the GPIO pins to be configured.</span></span><br><span class="line"><span class="comment">GPIOMode_TypeDef GPIO_Mode;     /*!&lt; Specifies the operating mode for the selected pins.</span></span><br><span class="line"><span class="comment">GPIOSpeed_TypeDef GPIO_Speed;   /*!&lt; Specifies the speed for the selected pins.</span></span><br><span class="line"><span class="comment">GPIOOType_TypeDef GPIO_OType;   /*!&lt; Specifies the operating output type for the selected pins.</span></span><br><span class="line"><span class="comment">GPIOPuPd_TypeDef GPIO_PuPd;     /*!&lt; Specifies the operating Pull-up/Pull down for the selected pins.</span></span><br></pre></td></tr></table></figure><p>引脚操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GPIO_ReadInputDataBit(GPIOF,GPIO_Pin_7) <span class="comment">//读取PF7引脚高低</span></span><br><span class="line">GPIO_ResetBits(GPIOF, GPIO_Pin_7);<span class="comment">//拉低PF7引脚</span></span><br><span class="line">GPIO_SetBits(GPIOF, GPIO_Pin_);<span class="comment">//拉高PF7引脚</span></span><br></pre></td></tr></table></figure><p>通过不同配置实现引脚的不同功能<br>5~9公用一条中断线，10~15公用一条中断线，要做好区分</p><h4 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a>TIM</h4><p>103有以下定时器<br>高级定时器:TIM1、TIM8<br>功能：拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能<br>通用定时器:TIM2、TIM3、TIM4、TIM5<br>功能：拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能<br>基本定时器:TIM6、TIM7<br>功能：拥有定时中断、主模式触发DAC的功能</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>PWM频率：    Freq = CK_PSC / (PSC + 1) / (ARR + 1)<br>PWM占空比：    Duty = CCR / (ARR + 1)<br>PWM分辨率：    Reso = 1 / (ARR + 1)<br>舵机的控制一般需要一个20ms左右的时基脉冲，该脉冲的高电平部分一般为0.5ms-2.5ms范围，总间隔为2ms。<br>TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1/TIM_OCMode_PWM2<br>TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High/TIM_OCPolarity_Low<br>一个为PWM输出模式，另一个为高/低电平有效，更改其中后的实际效果为产生原来互补的波形</p><p>例如TIM1输出PWM波</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TIM1_Config</span><span class="params">(<span class="type">uint16_t</span> arr,<span class="type">uint16_t</span> psc)</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class="line">TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);</span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB,DISABLE);</span><br><span class="line"></span><br><span class="line">TIM1_GPIO_Config();</span><br><span class="line">TIM_TimeBaseStructure.TIM_Prescaler = psc;      <span class="comment">//预分频(时钟分频)72M/4000=18K</span></span><br><span class="line">TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  <span class="comment">//向上计数</span></span><br><span class="line">TIM_TimeBaseStructure.TIM_Period = arr;               </span><br><span class="line">TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  </span><br><span class="line">TIM_TimeBaseStructure.TIM_RepetitionCounter = <span class="number">0</span>;   </span><br><span class="line">TIM_TimeBaseInit(TIM1,&amp;TIM_TimeBaseStructure);       </span><br><span class="line"></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;          <span class="comment">//PWM模式2</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;  <span class="comment">//正向通道有效 PA8 </span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;</span><br><span class="line">TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;</span><br><span class="line"></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>; </span><br><span class="line">TIM_OC2Init(TIM1,&amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse =<span class="number">0</span>;</span><br><span class="line">TIM_OC3Init(TIM1,&amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse =<span class="number">0</span>;</span><br><span class="line">TIM_OC1Init(TIM1,&amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;          <span class="comment">//PWM模式2</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;  <span class="comment">//正向通道有效 PA8 </span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;</span><br><span class="line">TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;</span><br><span class="line">TIM_OCInitStructure.TIM_Pulse =<span class="number">0</span>;</span><br><span class="line">TIM_OC4Init(TIM1,&amp;TIM_OCInitStructure); </span><br><span class="line"></span><br><span class="line">TIM_Cmd(TIM1,ENABLE);</span><br><span class="line">TIM_OC1PreloadConfig(TIM1,TIM_OCPreload_Enable);</span><br><span class="line">TIM_OC2PreloadConfig(TIM1,TIM_OCPreload_Enable);</span><br><span class="line">TIM_OC3PreloadConfig(TIM1,TIM_OCPreload_Enable);</span><br><span class="line">  TIM_OC4PreloadConfig(TIM1,TIM_OCPreload_Enable);</span><br><span class="line">TIM_ARRPreloadConfig(TIM1,ENABLE);</span><br><span class="line">TIM_CtrlPWMOutputs(TIM1,ENABLE);</span><br><span class="line">TIM_SetCompare1(TIM1,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare2(TIM1,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare3(TIM1,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM1,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输入捕获"><a href="#输入捕获" class="headerlink" title="输入捕获"></a>输入捕获</h5><p>输入捕获模式下，当通道输入引脚出现指定电平跳变时，当前CNT的值将被锁存到CCR中，可用于测量PWM波形的频率、占空比、脉冲间隔、电平持续时间等参数。<br>配合定时器进行计数，实现对转速的测量。<br>每个定时器具有编码器接口，进行对正反转以及转速的测量,一般为通道1和2.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Encoder_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*开启时钟*/</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);<span class="comment">//开启TIM3的时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//开启GPIOA的时钟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*GPIO初始化*/</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//将PA6和PA7引脚初始化为上拉输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*时基单元初始化*/</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//时钟分频，选择不分频，此参数用于配置滤波器时钟，不影响时基单元功能</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数器模式，选择向上计数</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">65536</span> - <span class="number">1</span>;               <span class="comment">//计数周期，即ARR的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">1</span> - <span class="number">1</span>;                <span class="comment">//预分频器，即PSC的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;            <span class="comment">//重复计数器，高级定时器才会用到</span></span><br><span class="line">TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseInitStructure);     <span class="comment">//将结构体变量交给TIM_TimeBaseInit，配置TIM3的时基单元</span></span><br><span class="line"><span class="comment">/*输入捕获初始化*/</span></span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">TIM_ICStructInit(&amp;TIM_ICInitStructure);<span class="comment">//结构体初始化，若结构体没有完整赋值</span></span><br><span class="line"><span class="comment">//则最好执行此函数，给结构体所有成员都赋一个默认值</span></span><br><span class="line"><span class="comment">//避免结构体初值不确定的问题</span></span><br><span class="line">TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;<span class="comment">//选择配置定时器通道1</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter = <span class="number">0xF</span>;<span class="comment">//输入滤波器参数，可以过滤信号抖动</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructure);<span class="comment">//将结构体变量交给TIM_ICInit，配置TIM3的输入捕获通道</span></span><br><span class="line">TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;<span class="comment">//选择配置定时器通道2</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter = <span class="number">0xF</span>;<span class="comment">//输入滤波器参数，可以过滤信号抖动</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructure);<span class="comment">//将结构体变量交给TIM_ICInit，配置TIM3的输入捕获通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*编码器接口配置*/</span></span><br><span class="line">TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);</span><br><span class="line"><span class="comment">//配置编码器模式以及两个输入通道是否反相</span></span><br><span class="line"><span class="comment">//注意此时参数的Rising和Falling已经不代表上升沿和下降沿了，而是代表是否反相</span></span><br><span class="line"><span class="comment">//此函数必须在输入捕获初始化之后进行，否则输入捕获的配置会覆盖此函数的部分配置</span></span><br><span class="line"><span class="comment">/*TIM使能*/</span></span><br><span class="line">TIM_Cmd(TIM3, ENABLE);<span class="comment">//使能TIM3，定时器开始运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="USART"><a href="#USART" class="headerlink" title="USART"></a>USART</h4><p>USART（Universal Synchronous/Asynchronous Receiver/Transmitter）通用同步/异步收发器,32上部分串口位UART，只有异步功能<br>实际并未规定电平标准，电平转换是很有必要的，否则或导致损坏<br>TTL电平：+3.3V或+5V表示1，0V表示0<br>RS232电平：-3~-15V表示1，+3~+15V表示0<br>RS485电平：两线压差+2~+6V表示1，-2~-6V表示0（差分信号）<br>一组数据发送：起始位+数据帧+奇偶校验位(可选)+停止位<br>接收每一数据，要等其前一个数据接收完毕，发送数据要等前一个数据发送完毕，否则会导致数据丢失。<br>发送数据要缓点，否则接收设备一直会处在串口中断，导致程序卡死</p><h4 id="ADC-amp-amp-DAC"><a href="#ADC-amp-amp-DAC" class="headerlink" title="ADC&amp;&amp;DAC"></a>ADC&amp;&amp;DAC</h4><p>ADC（Analog-Digital Converter）模拟-数字转换器，ADC可以将引脚上连续变化的模拟电压转换为内存中存储的数字变量，建立模拟电路到数字电路的桥梁12位逐次逼近型ADC，1us转换时间输入电压范围：0~3.3V，转换结果范围：0~409518个输入通道，可测量16个外部和2个内部信号源规则组和注入组两个转换单元模拟看门狗自动监测输入电压范围<br>AD转换的步骤：采样，保持，量化，编码。<br>根据香农采样定理，为了不失真地恢复信号，采样频率要超过模拟信号最高频率的两倍。</p><h4 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h4><p>I2C（Inter IC Bus）是由Philips公司开发的一种通用数据总线<br>特点:1.两根通信线：SCL（Serial Clock）、SDA（Serial Data）2.同步，半双工3.带数据应答支持5.总线挂载多设备（一主多从、多主多从）<br>发送应答：主机在接收完一个字节之后，在下一个时钟发送一位数据，数据0表示应答，数据1表示非应答<br>接收应答：主机在发送完一个字节之后，在下一个时钟接收一位数据，判断从机是否应答，数据0表示应答，数据1表示非应答（主机在接收之前，需要释放SDA）</p><h4 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h4><p>SPI（Serial Peripheral Interface）是由Motorola公司开发的一种通用数据总线四根通信线：SCK（Serial Clock）、MOSI（Master Output Slave Input）、MISO（Master Input Slave Output）、SS（Slave Select）同步，全双工支持总线挂载多设备（一主多从）<br>时序基本单元：<br>起始条件：SS从高电平切换到低电平终止条件：SS从低电平切换到高电平<br>交换一个字节（模式0）CPOL=0：空闲状态时，SCK为低电平CPHA=0：SCK第一个边沿移入数据，第二个边沿移出数据<br>交换一个字节（模式1）CPOL=0：空闲状态时，SCK为低电平CPHA=1：SCK第一个边沿移出数据，第二个边沿移入数据<br>交换一个字节（模式2）CPOL=1：空闲状态时，SCK为高电平CPHA=0：SCK第一个边沿移入数据，第二个边沿移出数据<br>交换一个字节（模式3）CPOL=1：空闲状态时，SCK为高电平CPHA=1：SCK第一个边沿移出数据，第二个边沿移入数据</p><h4 id="LVGL移植"><a href="#LVGL移植" class="headerlink" title="LVGL移植"></a>LVGL移植</h4><p>突出一个烦，其实没什么难度，首先将LVGL的仓库从git上拉下来，实际需要移植的src文件中的全部，examples中是例子，按需移植就行。<br>1.有一份能够正常显示LCD屏的代码，然后移植文件，将.c文件添加，.h文件加入编译路径（别管有没有用，一股脑全加），将一些头文件如”../lvgl.h”改为”lvgl.h”，使能文件，修改if 0 改为if 1，<br>2.根据自己的lcd屏的实际情况更改修改参数，横宽，色位，将一些画屏函数添加到LVGL中的对应函数中<br>3.1ms的定时器中断，lvgl处理中断<br>4.修改栈空间，不足会导致无法显示，103位于startup_stm32f10x_md.s中，407差不多也是，然后修改Stack_Size<br>6.main函数扔进去相关函数，进行初始化，运行                   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有lvgl初始化部分</span></span><br><span class="line">lv_init();  <span class="comment">// lvgl系统初始化</span></span><br><span class="line">lv_port_disp_init();  <span class="comment">// lvgl显示接口初始化,放在lv_init()的后面</span></span><br><span class="line">lv_port_indev_init(); <span class="comment">// lvgl输入接口初始化,放在lv_init()的后面</span></span><br><span class="line">lv_demo_benchmark(LV_DEMO_BENCHMARK_MODE_REAL);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tp_dev.scan(<span class="number">0</span>);</span><br><span class="line">lv_task_handler(); <span class="comment">// lvgl的事务处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到的坑&amp;目前的计划</title>
      <link href="/20230129/"/>
      <url>/20230129/</url>
      
        <content type="html"><![CDATA[<p>   寒假高强度刷b站，无意间看到GitHub page（其实也早就看到过，但当时摆烂沉迷游戏hhhh），就开始一步步跟着走，差不多大半个月，对网站的最多了解可能也就是个做了爬微博吧，可能我完全跟着可能还要快hhhh，挺上头的。。。大体上就完了，自我感觉不错，<del>也有种期末考试要寄的感觉哈哈</del>。准备考试去喽            —-2023.1.29</p><hr><h4 id="印象深刻的坑"><a href="#印象深刻的坑" class="headerlink" title="印象深刻的坑"></a>印象深刻的坑</h4><p>  反正首先就是缺什么装什么，前面有没hexo-都试下，npm没反应，还得是cnpm。</p><p>  root的_config.yml里的example.com感觉放着就好，前面还在GitHub page的时候，改了下，也不知道我后面动了什么，只剩下文字。</p><p>  写了description没起作用，在这里:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p>  一图流或许直接改transparent更好(?)把别人的css文件搬过来完完全全就直接是没了(?)背景颜色浅点看不见字，反而是主题的_config.yml更改，会有颜色深点的部分。还是得慢慢学起来wwww。</p><p>  傻逼edge，天天删我下载的，设置关了还删(实在找不到和下载的有关了QAQ)</p><hr><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><p>打算把网页做得简单些，所以后续可能不加太多东西了（懒（人总会是变吧</p><p>  试图把上一篇和下一遍的背景去掉，想摆就随便扔图了，想把下面这代码注释了，现实是没什么用，还是再学点东西再魔改吧（</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">if</span> <span class="string">next.cover_type</span> <span class="string">===</span> <span class="string">&#x27;img&#x27;</span></span><br><span class="line">            <span class="string">img.cover(src=url_for(next.cover)</span> <span class="string">onerror=`onerror=null;src=&#x27;$&#123;url_for(theme.error_img.post_page)&#125;&#x27;`</span> <span class="string">alt=&#x27;cover</span> <span class="string">of</span> <span class="string">next</span> <span class="string">post&#x27;)</span></span><br><span class="line">            <span class="string">else</span></span><br><span class="line">            <span class="string">.cover(style=`background:</span> <span class="string">$&#123;next.cover</span> <span class="string">||</span> <span class="string">&#x27;var(--default-bg-color)&#x27;</span><span class="string">&#125;`)</span></span><br></pre></td></tr></table></figure><p>  在about写点东西吧</p><p>  当作记录，当然也希望能够扔点自己满意的东西上来吧</p><p>  搞个图床（看情况吧，现在打算还是偏向于文字，</p><hr><h4 id="大致就是这样了"><a href="#大致就是这样了" class="headerlink" title="大致就是这样了"></a>大致就是这样了</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名get</title>
      <link href="/20230127/"/>
      <url>/20230127/</url>
      
        <content type="html"><![CDATA[<p>1那<span id="more"></span>现在就是<br>1<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ydduuccuuf.github.io</span><br><span class="line">flow127.cn</span><br></pre></td></tr></table></figure></p><p>就把今天日期放在域名上吧qwq（</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<p>又是一个Hello World<br>草了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一堆没用的东西</title>
      <link href="/%E5%B8%B8%E7%94%A8emoji/"/>
      <url>/%E5%B8%B8%E7%94%A8emoji/</url>
      
        <content type="html"><![CDATA[<p>😀😁😂🤣😃😄😅😆😉😊😋😎😍😘🥰😗😙😚☺🙂🤗🤩🤔<br>🤨😐😑😶🙄😏😣😥😮🤐😯😪😫🥱😴😌😛😜😝🤤😒😓😔😕<br>🙃🤑😲☹🙁😖😞😟😤😢😭😦😧😨😩🤯😬😰😱🥵🥶😳 🤪😵🥴😠😡🤬😷🤒🤕🤢🤮🤧😇🥳🥺🤡🤠🤥🤫🤭🧐<br>🤓😈👿👹👺💀☠👻👽👾🤖💩😺😸😹😻😼😽🙀😿😾🐱‍👤🐱‍🏍<br>🐱‍💻🐱‍🐉🐱‍👓🐱‍🚀🙈🙉🙊🐵🐶🐺🐱🦁🐯🦒🦊🦝🐮🐷🐗🐭🐹<br>🐰🐻🐨🐼🐸🦓🐴🦄🐔🐲🐽🐾🐒🦍🦧🦮🐕‍🦺🐩🐕🐈🐅🐆🐎🦌<br>🦏🦛🐂🐃🐄🐖🐏🐑🐐🐪🐫🦙🦘🦥🦨🦡🐘🐁🐀🦔🐇🐿🦎<br>🐊🐢🐍🐉🦕🦖🦦🦈🐬🐳🐋🐟🐠🐡🦐🦑🐙🦞🦀🐚🦆🐓🦃🦅🕊<br>🦢🦜🦩🦚🦉🐦🐧🐥🐤🐣🦇🦋🐌🐛🦟🦗🐜🐝🐞🦂🕷🕸🦠🧞<br>‍♀️🧞‍♂️🗣👤👥👁👀🦴🦷👅👄🧠🦾🦿👣🤺⛷🤼‍♂️🤼‍♀<br>👯‍♂️👯‍♀️💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤ ️<br>💋‍ 👨👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨<br>‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧<br>👩‍👦👩‍👧👩‍👧‍👦👩‍👦‍👦👩‍👧‍👧👨‍👦👨‍👧👨‍👧‍👦👨‍👦‍👦👨‍👧‍👧👭<br>👩🏻‍🤝‍👩🏻👩🏼‍🤝‍👩🏻👩🏼‍🤝‍👩🏼👩🏽‍🤝‍👩🏻👩🏽‍🤝‍👩🏼👩🏽‍🤝‍👩🏽👩🏾‍🤝‍👩🏻👩🏾‍🤝‍👩🏼👩🏾‍🤝‍👩🏽👩🏾‍🤝‍👩🏾👩🏿‍🤝‍👩🏻<br>👩🏿‍🤝‍👩🏼👩🏿‍🤝‍👩🏽👩🏿‍🤝‍👩🏾👩🏿‍🤝‍👩🏿👫👩🏻‍🤝‍🧑🏻👩🏻‍🤝‍🧑🏼👩🏻‍🤝‍🧑🏽👩🏻‍🤝‍🧑🏾👩🏻‍🤝‍🧑🏿<br>👩🏼‍🤝‍🧑🏻👩🏼‍🤝‍🧑🏼👩🏼‍🤝‍🧑🏽👩🏼‍🤝‍🧑🏾👩🏼‍🤝‍🧑🏿👩🏽‍🤝‍🧑🏻👩🏽‍🤝‍🧑🏼👩🏽‍🤝‍🧑🏽 👩🏽‍🤝<br>‍🧑🏾👩🏽‍🤝‍🧑🏿👩🏾‍🤝‍🧑🏻👩🏾‍🤝‍🧑🏼👩🏾‍🤝‍🧑🏽👩🏾‍🤝‍🧑🏾👩🏾‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏻 👩🏿 ‍🤝‍🧑🏼👩🏿‍🤝‍🧑🏽👩🏿‍🤝‍🧑🏾<br>👩🏿‍🤝‍🧑🏿👬👨🏻‍🤝‍👨🏻👨🏼‍🤝‍👨🏻👨🏼‍🤝‍👨🏼👨🏽‍🤝‍👨🏼👨🏽‍🤝‍👨🏻 👨🏽‍🤝‍👨🏽👨🏾‍🤝‍👨🏻👨🏾‍🤝‍👨🏼👨🏾‍🤝‍👨🏽👨🏾‍🤝‍👨🏾👨🏿‍🤝‍👨🏻👨🏿‍🤝‍👨🏼👨🏿‍🤝‍👨🏽👨🏿‍🤝‍👨🏾👨🏿‍🤝‍👨🏿</p><p>👩👨🧑👧👦🧒👶👵👴🧓👩‍🦰👨‍🦰👩‍🦱👨‍🦱👩‍🦲👨‍🦲👨‍🦳👱‍♀️<br>👱‍♂️👸🤴👳‍♀️👳‍♂️👲🧔👼🤶🎅👮‍♀️👮‍♂️🕵️‍♀️🕵️‍♂️💂‍♀️<br>💂‍♂️👷‍♀️👷‍♂️👩‍⚕️👨‍⚕️👩‍🎓👨‍🎓👩‍🏫👨‍🏫👩‍⚖️👨‍⚖️<br>👩‍🌾👨‍🌾👩‍🍳👨‍🍳👩‍🔧👨‍🔧👩‍🏭👨‍🏭👩‍💼👨‍💼👩‍🔬👨‍🔬👩‍💻👨‍💻👩‍🎤👨‍🎤👩<br>‍🎨👨‍🎨👩‍✈️👨‍✈️👩‍🚀👨‍🚀👩‍🚒👨‍🚒🧕👰🤵🤱🤰🦸‍♀️🦸‍♂️🦹‍♀️🦹‍♂️<br>🧙‍♀️🧙‍♂️🧚‍♀️🧚‍♂️🧛‍♀️🧛‍♂️🧜‍♀️🧜‍♂️🧝‍♀️🧝‍♂️🧟‍♀️🧟‍♂️🙍‍♀️<br>🙍‍♂️🙎‍♀️🙎‍♂️🙅‍♀️🙅‍♂️🙆‍♀️🙆‍♂️🧏‍♀️🧏‍♂️💁‍♀️<br>💁‍♂️🙋‍♀️🙋‍♂️🙇‍♀️🙇‍♂️🤦‍♀️🤦‍♂️🤷‍♀️🤷‍♂️<br>💆‍♀️💆‍♂️💇‍♀️💇‍♂️🧖‍♀️🧖‍♂️🤹‍♀️🤹‍♂️👩‍🦽👨‍🦽👩‍🦼<br>👨‍🦼👩‍🦯👨‍🦯🧎‍♀️🧎‍♂️🧍‍♀️🧍‍♂️🚶‍♀️🚶‍♂️🏃‍♀️🏃‍♂️💃🕺<br>🧗‍♀️🧗‍♂️🧘‍♀️🧘‍♂️🛀🛌🕴🏇🏂🏌️‍♀️🏌️‍♂️🏄‍♀️🏄‍♂️🚣‍♀️<br>🚣‍♂️🏊‍♀️🏊‍♂️🤽‍♀️🤽‍♂️🤾‍♀️🤾‍♂️⛹️‍♀️⛹️‍♂️<br>🏋️‍♀️🏋️‍♂️🚴‍♀️🚴‍♂️🚵‍♀️🚵‍♂️🤸‍♀️🤸‍♂️🤳💪🦵🦶<br>👂🦻👃🤏👈👉☝👆✌✌🤞🖖🤘🤙🖐✋👌👍👎✊👊🤛🤜🤚👋✍🤟👏👐🙌🤲🙏🤝💅</p><p>方便自己复制粘贴使用QWQ</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
